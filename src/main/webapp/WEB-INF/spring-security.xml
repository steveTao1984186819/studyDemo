<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:security="http://www.springframework.org/schema/security"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/security   
            http://www.springframework.org/schema/security/spring-security-3.1.xsd">  
      
    <!--  Spring-Security 的配置 -->  
    <!-- 注意use-expressions=true.表示开启表达式,否则表达式将不可用.  
    see:http://www.family168.com/tutorial/springsecurity3/html/el-access.html  
     -->  
    <security:http auto-config="true" use-expressions="true" access-denied-page="/auth/denied" >  
          <!-- /auth/login的权限为permitAll，表示所有人都可以访问此页面； -->
        <security:intercept-url pattern="/auth/login" access="permitAll"/> 
        	<!-- /main/admin的权限为ROLE_ADMIN，表示属于ROLE_ADMIN角色的用户才有权访问此页面； --> 
        <security:intercept-url pattern="/main/admin" access="hasRole('ROLE_ADMIN')"/>  
        	<!-- /main/common的权限为ROLE_USER，表示属于ROLE_USER的用户才有权访问此页面。 -->
        <security:intercept-url pattern="/main/common" access="hasRole('ROLE_USER')"/>  
        	<!-- springEL表达式的含义：
        		hasRole([role])返回 true 如果当前主体拥有特定角色。
				hasAnyRole([role1,role2])返回 true 如果当前主体拥有任何一个提供的角色 （使用逗号分隔的字符串队列）
				principal 允许直接访问主体对象，表示当前用户
				authentication允许直接访问当前 Authentication对象 从SecurityContext中获得
				permitAll 一直返回true
				denyAll 一直返回false
				isAnonymous()如果用户是一个匿名登录的用户 就会返回 true
				isRememberMe()如果用户是通过remember-me 登录的用户 就会返回true
				isAuthenticated()如果用户不是匿名用户就会返回true
				isFullyAuthenticated()如果用户不是通过匿名也不是通过remember-me登录的用户时， 就会返回true。  -->
        <security:form-login  
                login-page="/auth/login"   
                authentication-failure-url="/auth/login?error=true"   
                default-target-url="/main/common"/>  
              <!--  表示通过 /auth/login这个映射进行登录. 
					如果验证失败则返回一个URL:/auth/login?error=true 
					如果登录成功则默认指向:/main/common -->
        <security:logout   
                invalidate-session="true"   
                logout-success-url="/auth/login"   
                logout-url="/auth/logout"/>  
      		<!-- 这里我们开启了session失效功能。注销URL为:/auth/logout；注销成功后转向:/auth/login。 -->
    </security:http>  
      
    <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->  
    <security:authentication-manager>  
            <security:authentication-provider user-service-ref="customUserDetailsService">  
                    <security:password-encoder ref="passwordEncoder"/>  
            </security:authentication-provider>  
    </security:authentication-manager>  
      
    <!-- 对密码进行MD5编码 -->  
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>  
  
    <!--   
        通过 customUserDetailsService,Spring会自动的用户的访问级别.  
        也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.  
     -->   
    <bean id="customUserDetailsService" class="com.steve.service.CustomUserDetailService"/>  
      
</beans>  